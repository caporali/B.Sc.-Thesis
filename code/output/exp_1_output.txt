0. collecting data

0.1. NN structure: 
		- n. of hidden layers = 2
		- input size = 4
		- output size = 1
		- growth parameter = 100
		- type of growth = const
		- n. generated NNs: 10000
		- n. sample input = 5
	computing...
		0...
		100...
		200...
		300...
		400...
		500...
		600...
		700...
		800...
		900...
		1000...
		1100...
		1200...
		1300...
		1400...
		1500...
		1600...
		1700...
		1800...
		1900...
		2000...
		2100...
		2200...
		2300...
		2400...
		2500...
		2600...
		2700...
		2800...
		2900...
		3000...
		3100...
		3200...
		3300...
		3400...
		3500...
		3600...
		3700...
		3800...
		3900...
		4000...
		4100...
		4200...
		4300...
		4400...
		4500...
		4600...
		4700...
		4800...
		4900...
		5000...
		5100...
		5200...
		5300...
		5400...
		5500...
		5600...
		5700...
		5800...
		5900...
		6000...
		6100...
		6200...
		6300...
		6400...
		6500...
		6600...
		6700...
		6800...
		6900...
		7000...
		7100...
		7200...
		7300...
		7400...
		7500...
		7600...
		7700...
		7800...
		7900...
		8000...
		8100...
		8200...
		8300...
		8400...
		8500...
		8600...
		8700...
		8800...
		8900...
		9000...
		9100...
		9200...
		9300...
		9400...
		9500...
		9600...
		9700...
		9800...
		9900...

1. tests

1.1. mean array and covariance matrix of the NNs randomly generated and evaluated on sample_input[i], for i = 0,...,4:
mean:
 [-0.00354243 -0.00665407  0.00248438  0.01066375  0.01299695] 
covariance:
 [[17.25171395  9.05261251 15.5282864  21.20272439 13.2272047 ]
 [ 9.05261251  5.63059222  8.3796821  10.59587945  7.12119958]
 [15.5282864   8.3796821  14.70335737 19.13154959 12.5616007 ]
 [21.20272439 10.59587945 19.13154959 29.42393497 20.00177271]
 [13.2272047   7.12119958 12.5616007  20.00177271 17.66254693]]

time: 31.602519 seconds

1.2. plot: 
	- histogram of the NNs valued on sample_input[0]
	- N(-0.004,17.252) (fit of sample_input[0])

1.3. plot: 
	- histogram of the NNs valued on linear_combination
	  coefficients =  [3. 6. 6. 1. 4.]
	- N(0.027,4593.749) (fit of linear_combination)
